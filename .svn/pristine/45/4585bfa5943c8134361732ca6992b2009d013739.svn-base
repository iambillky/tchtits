<!--
File: templates/datacenters/bulk_add_racks.html
Purpose: Form template for bulk adding multiple racks to a floor
Version: 1.0.0
Author: iambilky

Revision History:
- v1.0.0: Initial creation with range selection and preview
-->

{% extends "base.html" %}

{% block title %}Bulk Add Racks{% endblock %}

{% block extra_css %}
<style>
    /* ========== CONTEXT BAR ========== */
    .context-bar {
        background: rgba(59, 130, 246, 0.1);
        border: 1px solid rgba(59, 130, 246, 0.2);
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 30px;
    }
    
    .context-path {
        display: flex;
        align-items: center;
        gap: 15px;
        flex-wrap: wrap;
    }
    
    .context-item {
        display: flex;
        align-items: center;
        gap: 8px;
    }
    
    .context-icon {
        font-size: 1.2rem;
    }
    
    .context-label {
        color: #8b92a5;
        font-size: 0.9rem;
    }
    
    .context-value {
        color: #60a5fa;
        font-weight: 600;
    }
    
    .context-separator {
        color: #4b5563;
        font-size: 1.2rem;
    }
    
    /* ========== INFO BANNER ========== */
    .info-banner {
        background: linear-gradient(135deg, rgba(96, 165, 250, 0.1), rgba(59, 130, 246, 0.05));
        border: 1px solid rgba(96, 165, 250, 0.2);
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 30px;
    }
    
    .info-banner-title {
        color: #60a5fa;
        font-size: 1.2rem;
        font-weight: 600;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        gap: 10px;
    }
    
    .info-banner-content {
        color: #e4e6eb;
        line-height: 1.6;
    }
    
    .info-banner-list {
        margin-top: 10px;
        padding-left: 20px;
    }
    
    .info-banner-list li {
        color: #a5b4c3;
        margin: 5px 0;
    }
    
    /* ========== FORM CONTAINER ========== */
    .form-container {
        max-width: 900px;
        margin: 0 auto;
    }
    
    .form-card {
        background: rgba(255, 255, 255, 0.05);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 12px;
        padding: 30px;
    }
    
    /* ========== FORM SECTIONS ========== */
    .form-section {
        margin-bottom: 30px;
    }
    
    .form-section-title {
        color: #60a5fa;
        font-size: 1.1rem;
        font-weight: 600;
        margin-bottom: 20px;
        padding-bottom: 10px;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    /* ========== FORM GROUPS ========== */
    .form-group {
        margin-bottom: 25px;
    }
    
    .form-label {
        display: block;
        color: #e4e6eb;
        font-weight: 500;
        margin-bottom: 8px;
        font-size: 0.95rem;
    }
    
    .form-label .required {
        color: #ef4444;
        margin-left: 3px;
    }
    
    /* ========== FORM CONTROLS ========== */
    .form-control {
        width: 100%;
        background: rgba(255, 255, 255, 0.08);
        border: 1px solid rgba(255, 255, 255, 0.15);
        border-radius: 8px;
        padding: 10px 14px;
        color: #fff;
        font-size: 1rem;
        transition: all 0.2s ease;
    }
    
    .form-control:focus {
        outline: none;
        background: rgba(255, 255, 255, 0.1);
        border-color: #60a5fa;
        box-shadow: 0 0 0 3px rgba(96, 165, 250, 0.1);
    }
    
    .form-control::placeholder {
        color: #6b7280;
    }
    
    /* ========== RANGE INPUTS ========== */
    .range-container {
        display: flex;
        align-items: center;
        gap: 15px;
    }
    
    .range-separator {
        color: #8b92a5;
        font-weight: 600;
    }
    
    .range-input {
        flex: 1;
    }
    
    /* ========== HELP TEXT ========== */
    .form-text {
        display: block;
        color: #8b92a5;
        font-size: 0.875rem;
        margin-top: 5px;
    }
    
    /* ========== PREVIEW SECTION ========== */
    .preview-section {
        background: rgba(16, 185, 129, 0.05);
        border: 1px solid rgba(16, 185, 129, 0.2);
        border-radius: 12px;
        padding: 20px;
        margin-top: 30px;
        display: none;
    }
    
    .preview-section.show {
        display: block;
    }
    
    .preview-title {
        color: #10b981;
        font-size: 1.1rem;
        font-weight: 600;
        margin-bottom: 15px;
        display: flex;
        align-items: center;
        gap: 8px;
    }
    
    .preview-summary {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 20px;
    }
    
    .preview-stat {
        display: flex;
        justify-content: space-between;
        padding: 8px 0;
        border-bottom: 1px solid rgba(255, 255, 255, 0.05);
    }
    
    .preview-stat:last-child {
        border-bottom: none;
    }
    
    .preview-stat-label {
        color: #8b92a5;
    }
    
    .preview-stat-value {
        color: #10b981;
        font-weight: 600;
    }
    
    .preview-list {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 10px;
        margin-top: 15px;
    }
    
    .preview-rack {
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 6px;
        padding: 10px;
        text-align: center;
        font-family: 'Courier New', monospace;
        font-weight: 600;
        color: #60a5fa;
        transition: all 0.2s ease;
    }
    
    .preview-rack:hover {
        background: rgba(96, 165, 250, 0.1);
        border-color: rgba(96, 165, 250, 0.3);
    }
    
    .preview-rack.exists {
        background: rgba(239, 68, 68, 0.1);
        border-color: rgba(239, 68, 68, 0.3);
        color: #f87171;
        text-decoration: line-through;
    }
    
    /* ========== WARNING BOX ========== */
    .warning-box {
        background: rgba(245, 158, 11, 0.1);
        border: 1px solid rgba(245, 158, 11, 0.2);
        border-radius: 8px;
        padding: 15px;
        margin-top: 20px;
        display: flex;
        align-items: flex-start;
        gap: 12px;
    }
    
    .warning-icon {
        color: #f59e0b;
        font-size: 1.2rem;
        flex-shrink: 0;
    }
    
    .warning-content {
        flex: 1;
        color: #fbbf24;
        font-size: 0.95rem;
    }
    
    /* ========== BUTTON GROUP ========== */
    .button-group {
        display: flex;
        gap: 15px;
        margin-top: 35px;
        padding-top: 25px;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    .btn-success {
        background: linear-gradient(135deg, #10b981, #059669);
        border: none;
        color: white;
        padding: 12px 30px;
        border-radius: 8px;
        font-weight: 500;
        transition: all 0.2s ease;
        cursor: pointer;
    }
    
    .btn-success:hover {
        background: linear-gradient(135deg, #059669, #047857);
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
    }
    
    .btn-success:disabled {
        background: rgba(255, 255, 255, 0.1);
        cursor: not-allowed;
        transform: none;
    }
    
    .btn-cancel {
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: #e4e6eb;
        padding: 12px 30px;
        border-radius: 8px;
        font-weight: 500;
        transition: all 0.2s ease;
        text-decoration: none;
        cursor: pointer;
    }
    
    .btn-cancel:hover {
        background: rgba(255, 255, 255, 0.15);
        color: #fff;
        border-color: rgba(255, 255, 255, 0.3);
        text-decoration: none;
    }
    
    /* ========== RESPONSIVE GRID ========== */
    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
    }
    
    @media (max-width: 768px) {
        .form-row {
            grid-template-columns: 1fr;
        }
        
        .context-path {
            flex-direction: column;
            align-items: flex-start;
        }
        
        .context-separator {
            display: none;
        }
        
        .range-container {
            flex-direction: column;
            align-items: stretch;
        }
        
        .range-separator {
            text-align: center;
        }
    }
</style>
{% endblock %}

{% block content %}
<div class="page-header">
    <h1 class="page-title">Bulk Add Racks</h1>
    <p class="page-subtitle">Add multiple racks to a floor at once</p>
</div>

<!-- ========== CONTEXT BAR ========== -->
<div class="context-bar">
    <div class="context-path">
        <div class="context-item">
            <span class="context-icon">üè¢</span>
            <span class="context-label">Data Center:</span>
            <span class="context-value">{{ floor.datacenter.code }} - {{ floor.datacenter.name }}</span>
        </div>
        <span class="context-separator">‚Üí</span>
        <div class="context-item">
            <span class="context-icon">üìç</span>
            <span class="context-label">Floor:</span>
            <span class="context-value">{{ floor.provider_designation }} ({{ floor.actual_floor }})</span>
        </div>
    </div>
</div>

<div class="form-container">
    <!-- ========== INFO BANNER ========== -->
    <div class="info-banner">
        <div class="info-banner-title">
            <span>üöÄ</span>
            <span>Bulk Rack Creation</span>
        </div>
        <div class="info-banner-content">
            This tool lets you quickly add an entire row of racks. Perfect for initial setup or expanding capacity.
            <ul class="info-banner-list">
                <li>All racks will have the same specifications (U height, power capacity)</li>
                <li>Cabinet numbers will be automatically padded (01, 02, 03...)</li>
                <li>Existing racks will be skipped to prevent duplicates</li>
                <li>Rack access codes must be set individually after creation</li>
            </ul>
        </div>
    </div>
    
    <div class="form-card">
        <form method="POST" action="{{ url_for('datacenters.bulk_add_racks', floor_id=floor.id) }}" id="bulkAddForm" novalidate>
            
            <!-- ========== ROW CONFIGURATION ========== -->
            <div class="form-section">
                <h3 class="form-section-title">Row Configuration</h3>
                
                <div class="form-group">
                    <label for="row_number" class="form-label">
                        Row/Grid Number <span class="required">*</span>
                    </label>
                    <input type="text" name="row_number" id="row_number" class="form-control" 
                           placeholder="G09" required>
                    <small class="form-text">The row identifier that all racks will share (e.g., G09, A12)</small>
                </div>
                
                <div class="form-group">
                    <label class="form-label">
                        Cabinet Number Range <span class="required">*</span>
                    </label>
                    <div class="range-container">
                        <input type="number" name="cabinet_start" id="cabinet_start" 
                               class="form-control range-input" 
                               placeholder="1" min="1" max="99" required>
                        <span class="range-separator">to</span>
                        <input type="number" name="cabinet_end" id="cabinet_end" 
                               class="form-control range-input" 
                               placeholder="10" min="1" max="99" required>
                    </div>
                    <small class="form-text">Enter the starting and ending cabinet numbers (e.g., 1 to 10)</small>
                </div>
            </div>
            
            <!-- ========== RACK SPECIFICATIONS ========== -->
            <div class="form-section">
                <h3 class="form-section-title">Rack Specifications</h3>
                <p style="color: #8b92a5; margin-bottom: 20px; font-size: 0.95rem;">
                    These settings will apply to all racks in this batch
                </p>
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="u_height" class="form-label">
                            U Height <span class="required">*</span>
                        </label>
                        <input type="number" name="u_height" id="u_height" class="form-control" 
                               value="42" min="1" max="60" required>
                        <small class="form-text">Standard is 42U</small>
                    </div>
                    
                    <div class="form-group">
                        <label for="power_capacity" class="form-label">
                            Power Capacity (Amps)
                        </label>
                        <input type="number" name="power_capacity" id="power_capacity" class="form-control" 
                               placeholder="30" min="0" step="0.1">
                        <small class="form-text">Leave empty if unknown</small>
                    </div>
                </div>
            </div>
            
            <!-- ========== PREVIEW SECTION ========== -->
            <div class="preview-section" id="previewSection">
                <div class="preview-title">
                    <span>üëÅÔ∏è</span>
                    <span>Preview</span>
                </div>
                
                <div class="preview-summary">
                    <div class="preview-stat">
                        <span class="preview-stat-label">Total Racks:</span>
                        <span class="preview-stat-value" id="totalRacks">0</span>
                    </div>
                    <div class="preview-stat">
                        <span class="preview-stat-label">Total U Capacity:</span>
                        <span class="preview-stat-value" id="totalCapacity">0U</span>
                    </div>
                    <div class="preview-stat">
                        <span class="preview-stat-label">Total Power:</span>
                        <span class="preview-stat-value" id="totalPower">0A</span>
                    </div>
                </div>
                
                <div class="preview-title" style="font-size: 1rem; margin-top: 20px;">Racks to be created:</div>
                <div class="preview-list" id="rackList"></div>
            </div>
            
            <!-- ========== WARNING MESSAGE ========== -->
            <div class="warning-box">
                <span class="warning-icon">‚ö†Ô∏è</span>
                <div class="warning-content">
                    <strong>Note:</strong> Rack access codes cannot be set during bulk creation. 
                    You'll need to edit each rack individually to add their 4-digit access codes.
                </div>
            </div>
            
            <!-- ========== ACTION BUTTONS ========== -->
            <div class="button-group">
                <button type="submit" class="btn btn-success" id="submitBtn" disabled>
                    <span style="margin-right: 8px;">‚ûï</span> Create <span id="buttonCount">0</span> Racks
                </button>
                <a href="{{ url_for('datacenters.index') }}" class="btn btn-cancel">
                    <span style="margin-right: 8px;">‚úï</span> Cancel
                </a>
            </div>
        </form>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
// ========== FORM VALIDATION & PREVIEW ==========
const dcCode = '{{ floor.datacenter.code }}';
let existingRacks = []; // Could be populated from backend if needed

function updatePreview() {
    const rowNumber = document.getElementById('row_number').value.toUpperCase();
    const cabinetStart = parseInt(document.getElementById('cabinet_start').value) || 0;
    const cabinetEnd = parseInt(document.getElementById('cabinet_end').value) || 0;
    const uHeight = parseInt(document.getElementById('u_height').value) || 42;
    const powerCapacity = parseFloat(document.getElementById('power_capacity').value) || 0;
    
    // Validate inputs
    if (!rowNumber || cabinetStart < 1 || cabinetEnd < 1 || cabinetEnd < cabinetStart) {
        document.getElementById('previewSection').classList.remove('show');
        document.getElementById('submitBtn').disabled = true;
        document.getElementById('buttonCount').textContent = '0';
        return;
    }
    
    // Calculate totals
    const rackCount = cabinetEnd - cabinetStart + 1;
    const totalU = rackCount * uHeight;
    const totalPower = rackCount * powerCapacity;
    
    // Update summary
    document.getElementById('totalRacks').textContent = rackCount;
    document.getElementById('totalCapacity').textContent = totalU + 'U';
    document.getElementById('totalPower').textContent = powerCapacity ? totalPower + 'A' : 'Not specified';
    
    // Generate rack list
    const rackList = document.getElementById('rackList');
    rackList.innerHTML = '';
    
    for (let i = cabinetStart; i <= cabinetEnd; i++) {
        const cabinetNum = String(i).padStart(2, '0');
        const rackId = `${dcCode}-${rowNumber}.${cabinetNum}`;
        
        const rackDiv = document.createElement('div');
        rackDiv.className = 'preview-rack';
        rackDiv.textContent = rackId;
        
        // Check if rack exists (would need backend check in real implementation)
        if (existingRacks.includes(rackId)) {
            rackDiv.classList.add('exists');
            rackDiv.title = 'This rack already exists and will be skipped';
        }
        
        rackList.appendChild(rackDiv);
    }
    
    // Show preview and enable submit
    document.getElementById('previewSection').classList.add('show');
    document.getElementById('submitBtn').disabled = false;
    document.getElementById('buttonCount').textContent = rackCount;
}

// ========== EVENT LISTENERS ==========
document.getElementById('row_number').addEventListener('input', function(e) {
    e.target.value = e.target.value.toUpperCase();
    updatePreview();
});

document.getElementById('cabinet_start').addEventListener('input', updatePreview);
document.getElementById('cabinet_end').addEventListener('input', updatePreview);
document.getElementById('u_height').addEventListener('input', updatePreview);
document.getElementById('power_capacity').addEventListener('input', updatePreview);

// ========== FORM SUBMISSION CONFIRMATION ==========
document.getElementById('bulkAddForm').addEventListener('submit', function(e) {
    const rackCount = parseInt(document.getElementById('buttonCount').textContent);
    if (!confirm(`Are you sure you want to create ${rackCount} racks? This action cannot be easily undone.`)) {
        e.preventDefault();
    }
});

// ========== CABINET NUMBER VALIDATION ==========
document.getElementById('cabinet_end').addEventListener('change', function(e) {
    const start = parseInt(document.getElementById('cabinet_start').value) || 1;
    const end = parseInt(e.target.value);
    
    if (end < start) {
        e.target.value = start;
        alert('End cabinet number must be greater than or equal to start cabinet number.');
    }
    
    if (end - start > 50) {
        if (!confirm(`This will create ${end - start + 1} racks. Are you sure you want to create this many at once?`)) {
            e.target.value = start + 9; // Default to 10 racks
        }
    }
    
    updatePreview();
});
</script>
{% endblock %}